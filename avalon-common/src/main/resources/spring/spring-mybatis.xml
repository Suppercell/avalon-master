<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/task  
	   http://www.springframework.org/schema/task/spring-task-3.2.xsd">
    
    <!-- druid数据源配置 -->
    <bean id="platformDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${platformDataSource.url}"/>
        <property name="username" value="${platformDataSource.username}"/>
        <property name="password" value="${platformDataSource.password}"/>        

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="10"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="1800000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="10"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

 	<bean id="jdbcTemplatePlatform" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="platformDataSource"/>
    </bean>

    <!-- 会话工厂bean sqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="platformDataSource"></property>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.avalon.common.entity"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:mapper/**/*.xml"></property>
        <property name="plugins">
		  <array>
		   <bean class="com.github.pagehelper.PageInterceptor">
		   	 <property name="properties">
		      <!--使用下面的方式配置参数，一行配置一个 -->
		      <value>
		        helperDialect=mysql
		      </value>
   			 </property>
		   </bean>
		   <bean class="com.avalon.common.cat.mybatis.CatMybatisPlugins"></bean>
		  </array>
		</property>		
		<property name="configLocation" value="classpath:spring/mybatis-config.xml" />
    </bean>
    
    <!-- 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.avalon.common.dao"></property>
    </bean>

	
    <!-- 数据库事务策略 -->
    <bean id="platformTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="platformDataSource">
        </property>
        <property name="rollbackOnCommitFailure" value="true"/>
        <property name="globalRollbackOnParticipationFailure" value="true"/>
    </bean>

    <tx:advice id="platformTxAdvice" transaction-manager="platformTransactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
            <tx:method name="*" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
    <aop:config>
        <aop:pointcut id="serviceOperation" expression="execution(* com.avalon.service..*Service*.*(..))"/>
        <aop:advisor pointcut-ref="serviceOperation" advice-ref="platformTxAdvice"/>
    </aop:config>


   
</beans>
